<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WithoutHaste.Drawing.Shapes</name>
    </assembly>
    <members>
        <member name="T:WithoutHaste.Drawing.Shapes.Circle">
            <summary>
            A circle shape. Immutable.
            </summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.Circle.DEGREES_IN_CIRCLE">
            <summary></summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.Circle.DEGREES_IN_HALF_CIRCLE">
            <summary></summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.Circle.RADIANS_90DEGREES">
            <summary></summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.Circle.RADIANS_180DEGREES">
            <summary></summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.Circle.RADIANS_270DEGREES">
            <summary></summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.Circle.RADIANS_360DEGREES">
            <summary></summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.Circle.X">
            <summary>Center x coordinate.</summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.Circle.Y">
            <summary>Center y coordinate.</summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.Circle.Radius">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Circle.Center">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Circle.Diameter">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Circle.MaxX">
            <summary>See <see cref="T:WithoutHaste.Drawing.Shapes.IDraw"/>.</summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Circle.MaxY">
            <summary>See <see cref="T:WithoutHaste.Drawing.Shapes.IDraw"/>.</summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Circle.MaxXDegrees">
            <summary>Based on coordinate plane, which degree points towards the MaxX coordinate?</summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Circle.MaxYDegrees">
            <summary>Based on coordinate plane, which degree points towards the MaxY coordinate?</summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.#ctor(System.Double,System.Double,System.Double)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.#ctor(WithoutHaste.Drawing.Shapes.Point,System.Double)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.GetIntersectionPoints(WithoutHaste.Drawing.Shapes.Circle)">
            <returns>Null (no intersection), an array of length 1, or an array of length 2.</returns>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.GetTangentPoints(WithoutHaste.Drawing.Shapes.Point)">
            <summary>
            Find the two tangent points on the circle that form lines to point B.
            </summary>
            <returns>Array of 2 Points.</returns>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.Overlaps(WithoutHaste.Drawing.Shapes.Circle)">
            <summary>
            Any part of this circle overlaps any part of circle B.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.Overlaps(WithoutHaste.Drawing.Shapes.LineSegment)">
            <summary>
            <para>Any part of this circle overlaps any part of line segment B.</para>
            <para>If line B lies within the circle, that counts as overlapping.</para>
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.ContainsOrIsContained(WithoutHaste.Drawing.Shapes.Circle)">
            <summary>
            This circle entirely contains circle B, or B entirely contains this circle, or they exactly overlap.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.Contains(WithoutHaste.Drawing.Shapes.Circle)">
            <summary>
            This circle entirely contains circle B, or they exactly overlap.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.Contains(WithoutHaste.Drawing.Shapes.Wedge)">
            <summary>
            This circle entirely contains wedge B.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.Contains(WithoutHaste.Drawing.Shapes.Point)">
            <summary>
            Point B lies within or on this circle.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.PointAtRadians(System.Double)">
            <summary>
            Return the point on the circle at this radians. 0 radians is East of center, increases clockwise.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.PointAtDegrees(System.Double)">
            <summary>
            Return the point on the circle at this degree. 0 degrees is East of center, increases clockwise.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.DegreesAtPoint(WithoutHaste.Drawing.Shapes.Point)">
            <summary>
            Given a line from the center of a circle to a point, what degrees is the line angle at? 0 degrees is East from center, and increases clockwise.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.GetIntersectionPoints(WithoutHaste.Drawing.Shapes.Line)">
            <returns>Null (no intercepts), or array of length 1 or 2.</returns>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.GetIntersectionPoints(WithoutHaste.Drawing.Shapes.LineSegment)">
            <returns>Null (no intercepts), or array of length 1 or 2.</returns>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.DegreesToRadians(System.Double)">
            <summary>
            Convert degrees to radians.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.RadiansToDegrees(System.Double)">
            <summary>
            Convert radians to degrees.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.op_Division(WithoutHaste.Drawing.Shapes.Circle,System.Double)">
            <summary>
            Scale circle down by B amount. Affects length and location measures.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.op_Equality(WithoutHaste.Drawing.Shapes.Circle,WithoutHaste.Drawing.Shapes.Circle)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.op_Inequality(WithoutHaste.Drawing.Shapes.Circle,WithoutHaste.Drawing.Shapes.Circle)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.GetHashCode">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.ToString">
            <summary>Format "C:(x,y) R:radius"</summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Circle.Paint(System.Drawing.Graphics,System.Drawing.Pen,System.Double)">
            <summary>See <see cref="T:WithoutHaste.Drawing.Shapes.IDraw"/>.</summary>
        </member>
        <member name="T:WithoutHaste.Drawing.Shapes.Geometry">
            <summary>
            Miscellaneous settings and operations.
            </summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.Geometry.MarginOfError">
            <summary>
            When determining equality, all values have a +- margin of error.
            </summary>
        </member>
        <member name="T:WithoutHaste.Drawing.Shapes.Geometry.CoordinatePlanes">
            <summary>
            Determines how cardinal directions apply to coordinates.
            </summary>
            <enum/>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.Geometry.CoordinatePlanes.Screen">
            <summary>
            Computer screens have (0,0) in the upper-left corner and increase to the right and down.
            </summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.Geometry.CoordinatePlanes.Paper">
            <summary>
            Paper graphs have (0,0) in the lower-left corner and increase to the right and up.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Geometry.PointOnLine(WithoutHaste.Drawing.Shapes.Point,WithoutHaste.Drawing.Shapes.Point,System.Double)">
            <summary>
            Calculates point along line AB, starting at A and moving towards B
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Geometry.PointPastLine(WithoutHaste.Drawing.Shapes.Point,WithoutHaste.Drawing.Shapes.Point,System.Double)">
            <summary>
            Calculates point along line AB, starting at B and moving away from A
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Geometry.LineDirection(WithoutHaste.Drawing.Shapes.Point,WithoutHaste.Drawing.Shapes.Point)">
            <summary>
            Given directed line A to B, what direction is it pointing?
            North, South, East, and West are precise. The inbetween directions are vague.
            </summary>
        </member>
        <member name="T:WithoutHaste.Drawing.Shapes.IDraw">
            <summary>
            Anything that can be drawn on a Graphics object.
            </summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.IDraw.MaxX">
            <summary>Maximum x coordinate required to draw the figure.</summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.IDraw.MaxY">
            <summary>Maximum y coordinate required to draw the figure.</summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.IDraw.Paint(System.Drawing.Graphics,System.Drawing.Pen,System.Double)">
            <summary>
            Draw the figure on the Graphics with the Pen.
            </summary>
            <param name="unitsToPixels">Conversion ratio from figure units to pixels.</param>
        </member>
        <member name="T:WithoutHaste.Drawing.Shapes.Line">
            <summary>
            Line of infinite length passing through points A and B. Immutable.
            </summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.Line.A">
            <summary></summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.Line.B">
            <summary></summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.Line.IsDirected">
            <summary>
            When directed, the direction is A to B.
            </summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Line.Slope">
            <summary>Slope assumes direction from A to B.</summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Line.PerpendicularSlope">
            <summary>Slope of line perpendicular to this one.</summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Line.YIntercept">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Line.IsVertical">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Line.IsHorizontal">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Line.#ctor(WithoutHaste.Drawing.Shapes.Point,WithoutHaste.Drawing.Shapes.Point)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Line.#ctor(WithoutHaste.Drawing.Shapes.Point,WithoutHaste.Drawing.Shapes.Point,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Line.ToLineSegment">
            <summary>Convert to <see cref="T:WithoutHaste.Drawing.Shapes.LineSegment"/>.</summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Line.GetPerpendicularIntersect(WithoutHaste.Drawing.Shapes.Point)">
            <summary>
            Get the point where a perpendicular line passing through point C intersects this line.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Line.op_Division(WithoutHaste.Drawing.Shapes.Line,System.Double)">
            <summary>
            Scale line down by B amount. Affects length and location measures.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Line.ToString">
            <summary>Format "(x,y) to (x,y)"</summary>
        </member>
        <member name="T:WithoutHaste.Drawing.Shapes.LineSegment">
            <summary>
            Line segment from point A to point B. Immutable.
            </summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.LineSegment.MaxX">
            <summary>See <see cref="T:WithoutHaste.Drawing.Shapes.IDraw"/>.</summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.LineSegment.MaxY">
            <summary>See <see cref="T:WithoutHaste.Drawing.Shapes.IDraw"/>.</summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.LineSegment.#ctor(WithoutHaste.Drawing.Shapes.Point,WithoutHaste.Drawing.Shapes.Point)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.LineSegment.#ctor(WithoutHaste.Drawing.Shapes.Point,WithoutHaste.Drawing.Shapes.Point,System.Boolean)">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.LineSegment.Length">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.LineSegment.ToLine">
            <summary>Convert to <see cref="T:WithoutHaste.Drawing.Shapes.Line"/>.</summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.LineSegment.Overlaps(WithoutHaste.Drawing.Shapes.Point)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.LineSegment.Overlaps(WithoutHaste.Drawing.Shapes.LineSegment)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.LineSegment.ToString">
            <summary>Format "(x,y) to (x,y)"</summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.LineSegment.Paint(System.Drawing.Graphics,System.Drawing.Pen,System.Double)">
            <summary>See <see cref="T:WithoutHaste.Drawing.Shapes.IDraw"/>.</summary>
        </member>
        <member name="T:WithoutHaste.Drawing.Shapes.Point">
            <summary>
            An (X, Y) coordinate. Immutable.
            </summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.Point.X">
            <summary></summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.Point.Y">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Point.MaxX">
            <summary>See <see cref="T:WithoutHaste.Drawing.Shapes.IDraw"/>.</summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Point.MaxY">
            <summary>See <see cref="T:WithoutHaste.Drawing.Shapes.IDraw"/>.</summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Point.#ctor(System.Double,System.Double)">
            <summary></summary>
            <param name="x">Cannot be NaN or Infinity.</param>
            <param name="y">Cannot be NaN or Infinity.</param>
            <exception cref="T:System.ArgumentException">X or Y was NaN or Infinity.</exception>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Point.Distance(WithoutHaste.Drawing.Shapes.Point)">
            <summary>
            Distance between this point and point B.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Point.Overlaps(WithoutHaste.Drawing.Shapes.LineSegment)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Point.op_Addition(WithoutHaste.Drawing.Shapes.Point,WithoutHaste.Drawing.Shapes.Point)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Point.op_Subtraction(WithoutHaste.Drawing.Shapes.Point,WithoutHaste.Drawing.Shapes.Point)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Point.op_Multiply(System.Double,WithoutHaste.Drawing.Shapes.Point)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Point.op_Multiply(WithoutHaste.Drawing.Shapes.Point,System.Double)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Point.op_Division(System.Double,WithoutHaste.Drawing.Shapes.Point)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Point.op_Division(WithoutHaste.Drawing.Shapes.Point,System.Double)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Point.op_LessThan(WithoutHaste.Drawing.Shapes.Point,WithoutHaste.Drawing.Shapes.Point)">
            <summary>
            Greater than/less than is judged along the x-axis first, then the y-axis
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Point.op_GreaterThan(WithoutHaste.Drawing.Shapes.Point,WithoutHaste.Drawing.Shapes.Point)">
            <summary>
            Greater than/less than is judged along the x-axis first, then the y-axis
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Point.op_Equality(WithoutHaste.Drawing.Shapes.Point,WithoutHaste.Drawing.Shapes.Point)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Point.op_Inequality(WithoutHaste.Drawing.Shapes.Point,WithoutHaste.Drawing.Shapes.Point)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Point.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Point.GetHashCode">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Point.ToString">
            <summary>Format "(X,Y)"</summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Point.Paint(System.Drawing.Graphics,System.Drawing.Pen,System.Double)">
            <summary>See <see cref="T:WithoutHaste.Drawing.Shapes.IDraw"/>.</summary>
        </member>
        <member name="T:WithoutHaste.Drawing.Shapes.Range">
            <summary>
            A linear range of values. Immutable.
            </summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.Range.Start">
            <summary>
            For non-circular ranges, operations assume that Start is the minimum value.
            </summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.Range.End">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Range.Span">
            <summary>End minus Start.</summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Range.Middle">
            <summary>Middle value between Start and End.</summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Range.#ctor(System.Double,System.Double)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Range.Centered(System.Double,System.Double)">
            <summary>Create a range with this span and middle value.</summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Range.Overlaps(WithoutHaste.Drawing.Shapes.Range)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Range.Overlaps(System.Double)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Range.ConvertValue(WithoutHaste.Drawing.Shapes.Range,WithoutHaste.Drawing.Shapes.Range,System.Double)">
            <summary>
            Convert a value in originalRange to one in newRange, assuming that the original range is re-scaled to the new range.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Range.ToString">
            <summary>Format "start-end"</summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Range.op_Addition(WithoutHaste.Drawing.Shapes.Range,WithoutHaste.Drawing.Shapes.Range)">
            <summary>
            <para>Returns a range that covers all the area both A and B cover, including any gap in between.</para>
            <para>This operation is commutative.</para>.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Range.op_Equality(WithoutHaste.Drawing.Shapes.Range,WithoutHaste.Drawing.Shapes.Range)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Range.op_Inequality(WithoutHaste.Drawing.Shapes.Range,WithoutHaste.Drawing.Shapes.Range)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Range.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Range.GetHashCode">
            <summary></summary>
        </member>
        <member name="T:WithoutHaste.Drawing.Shapes.RangeCircular">
            <summary>
            A range on a circular scale within range [0, CircularModulus). Immutable.
            </summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.RangeCircular.CircularModulus">
            <summary>The value where the range loops back to 0.</summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.RangeCircular.Span">
            <summary>Length from Start to End.</summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.RangeCircular.Middle">
            <summary>Middle value in range.</summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.RangeCircular.#ctor(System.Double,System.Double,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.RangeCircular.Centered(System.Double,System.Double,System.Int32)">
            <summary>Create a range with this span, middle value, and modulus.</summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.RangeCircular.Overlaps(WithoutHaste.Drawing.Shapes.RangeCircular)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.RangeCircular.Overlaps(System.Double)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.RangeCircular.op_Addition(WithoutHaste.Drawing.Shapes.RangeCircular,WithoutHaste.Drawing.Shapes.RangeCircular)">
            <summary>
            <para>Returns a range that covers all the area both A and B cover, including any gap in between.</para>
            <para>If the ranges overlap, there is no gap filled in.</para>
            <para>Gaps are covered from direction A to B, therefore this operation is not commutative.</para>
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.RangeCircular.Mod(System.Double)">
            <summary>Convert a number into this range.</summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.RangeCircular.Mod(System.Double,System.Int32)">
            <summary>
            Returns number modulus m. Ensures a positive result.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.RangeCircular.op_Equality(WithoutHaste.Drawing.Shapes.RangeCircular,WithoutHaste.Drawing.Shapes.RangeCircular)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.RangeCircular.op_Inequality(WithoutHaste.Drawing.Shapes.RangeCircular,WithoutHaste.Drawing.Shapes.RangeCircular)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.RangeCircular.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.RangeCircular.GetHashCode">
            <summary></summary>
        </member>
        <member name="T:WithoutHaste.Drawing.Shapes.Shape">
            <summary>Main base class for library.</summary>
        </member>
        <member name="T:WithoutHaste.Drawing.Shapes.Wedge">
            <summary>
            A wedge is a slice of a circle. It is also known as a circular sector. Immutable.
            </summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.Wedge.Radius">
            <summary></summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Wedge.Circle">
            <summary>Full circle that this Wedge is a part of.</summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Wedge.StartPoint">
            <summary>Point on circumference of Circle where Wedge begins.</summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Wedge.EndPoint">
            <summary>Point on circumference of Circle where Wedge ends.</summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Wedge.ArcPoint">
            <summary>The point at the middle of the arc.</summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Wedge.FourPoints">
            <summary>
             <list type="bullet">
              <listheader>
               The boundary points of the Wedge:
              </listheader>
              <item>the center of the circle</item>
              <item>StartPoint</item>
              <item>EndPoint</item>
              <item>ArcPoint</item>
             </list>
            </summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Wedge.LineEdges">
            <summary>
             <list type="bullet">
              <listheader>
               The straight edges of the Wedge:
              </listheader>
              <item>Center to StartPoint</item>
              <item>Center to EndPoint</item>
             </list>
            </summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Wedge.MaxX">
            <summary>See <see cref="T:WithoutHaste.Drawing.Shapes.IDraw"/>.</summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.Wedge.MaxY">
            <summary>See <see cref="T:WithoutHaste.Drawing.Shapes.IDraw"/>.</summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Wedge.#ctor(WithoutHaste.Drawing.Shapes.Circle,WithoutHaste.Drawing.Shapes.RangeCircular)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Wedge.#ctor(WithoutHaste.Drawing.Shapes.Circle,System.Double,System.Double)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Wedge.Overlaps(WithoutHaste.Drawing.Shapes.Circle)">
            <summary>
            Any part of this wedge overlaps any part of circle B.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Wedge.Overlaps(WithoutHaste.Drawing.Shapes.Wedge)">
            <summary>
            Any part of this wedge overlaps any part of wedge B.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Wedge.ArcOverlaps(WithoutHaste.Drawing.Shapes.LineSegment)">
            <summary>
            The arc is the curved circle segment part of the wedge.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Wedge.ArcOverlapsArc(WithoutHaste.Drawing.Shapes.Wedge)">
            <summary>
            The arc is the curved circle segment part of the wedge.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Wedge.Contains(WithoutHaste.Drawing.Shapes.Circle)">
            <summary>
            Circle B lies entirely within this wedge.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Wedge.Contains(WithoutHaste.Drawing.Shapes.Point)">
            <summary>
            This wedge contains point B, including point B being on an edge of the wedge.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Wedge.op_Division(WithoutHaste.Drawing.Shapes.Wedge,System.Double)">
            <summary>
            Scale wedge down by B amount. Affects length and location measures, but not degrees.
            </summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Wedge.Paint(System.Drawing.Graphics,System.Drawing.Pen,System.Double)">
            <summary>See <see cref="T:WithoutHaste.Drawing.Shapes.IDraw"/>.</summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.Wedge.ToString">
            <summary></summary>
        </member>
        <member name="T:WithoutHaste.Drawing.Shapes.WedgeUnbound">
            <summary>
            A wedge is a slice of a circle. An unbounded wedge is a slice of circle that extends outward with no limit. Immutable.
            </summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.WedgeUnbound.Center">
            <summary>Center of the circle that defines this wedge.</summary>
        </member>
        <member name="F:WithoutHaste.Drawing.Shapes.WedgeUnbound.Degrees">
            <summary>The degrees of the defining circle that this Wedge extends through.</summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.WedgeUnbound.Span">
            <summary>The total degrees this wedge covers.</summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.WedgeUnbound.Start">
            <summary>Starting degree.</summary>
        </member>
        <member name="P:WithoutHaste.Drawing.Shapes.WedgeUnbound.End">
            <summary>Ending degree.</summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.WedgeUnbound.#ctor(WithoutHaste.Drawing.Shapes.Point,WithoutHaste.Drawing.Shapes.RangeCircular)">
            <summary></summary>
        </member>
        <member name="M:WithoutHaste.Drawing.Shapes.WedgeUnbound.#ctor(WithoutHaste.Drawing.Shapes.Point,System.Double,System.Double)">
            <summary></summary>
        </member>
    </members>
</doc>
